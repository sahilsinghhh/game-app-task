{"version":3,"sources":["frontend/Counter.js","frontend/Dashboard.js","App.js","reportWebVitals.js","index.js"],"names":["LikeComponent","likeManager","gameData","initialCount","Number","likes","useState","count","setCount","Button","variant","color","onClick","id","useStyles","makeStyles","root","width","margin","boxShadow","Dashboard","classes","loading","setLoading","post","setPost","error","setError","isAnUpdate","setIsAnUpdate","totalLikes","setTotalLikes","calculateSum","games","reduce","prev","cur","useEffect","returnVal","JSON","parse","localStorage","getItem","CheckGamesLocalStoarage","gamePosts","sum","axios","get","then","response","data","catch","setItem","stringify","LikeManager","numberOfLikes","newArray","findIndex","element","Typography","gutterBottom","component","style","Box","display","justifyContent","m","window","location","reload","position","bottom","mr","marginRight","marginLeft","clear","className","flexWrap","CircularProgress","map","list","Card","CardActionArea","CardMedia","alt","height","image","title","CardContent","whiteSpace","textOverflow","name","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8ebb06d3.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport ThumbUpAltOutlinedIcon from '@material-ui/icons/ThumbUpAltOutlined';\r\nimport Button from '@material-ui/core/Button';\r\n\r\n\r\nexport default function LikeComponent ({likeManager,gameData}) {\r\n    const initialCount = Number(gameData.likes)\r\n    const [count, setCount] = useState(initialCount)\r\n\r\n\r\n    const handleLike = () => {  \r\n        setCount(count+1);\r\n        likeManager(count+1,gameData.id)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n \r\n            <Button variant=\"outlined\" color=\"secondary\" onClick={handleLike} >\r\n                <ThumbUpAltOutlinedIcon /> &nbsp;{count} &nbsp;like \r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React, { useState, useEffect } from 'react'\r\nimport axios from 'axios'\r\nimport CircularProgress from '@material-ui/core/CircularProgress';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Card from '@material-ui/core/Card';\r\nimport CardActionArea from '@material-ui/core/CardActionArea';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport CardMedia from '@material-ui/core/CardMedia';\r\nimport Button from '@material-ui/core/Button';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport RefreshIcon from '@material-ui/icons/Refresh';\r\nimport Counter from './Counter';\r\nimport Box from '@material-ui/core/Box';\r\nimport ThumbUpAltIcon from '@material-ui/icons/ThumbUpAlt';\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        width: 250,\r\n        margin: 30,\r\n        boxShadow: \"1px 15px 25px #ada9a9\",\r\n    },\r\n});\r\n\r\nconst Dashboard = () => {\r\n    const classes = useStyles();\r\n    const [loading, setLoading] = useState(false)\r\n    const [post, setPost] = useState([])\r\n    const [error, setError] = useState('')\r\n    const [isAnUpdate, setIsAnUpdate] = useState(false);\r\n    const [totalLikes, setTotalLikes] = useState(0);\r\n\r\n    const CheckGamesLocalStoarage = () => {\r\n        let returnVal = false;\r\n        const data = JSON.parse(localStorage.getItem(\"gameList\"));\r\n        if (data) {\r\n            returnVal = true;\r\n        }\r\n        return returnVal;\r\n    }\r\n\r\n    const calculateSum = (games) => {\r\n        var msgTotal = games.reduce(function (prev, cur) {\r\n            return prev + cur.likes;\r\n        }, 0);\r\n\r\n        return msgTotal;\r\n    }\r\n    useEffect(() => {\r\n        debugger\r\n        if (!CheckGamesLocalStoarage()) {\r\n            setLoading(true);\r\n            axios.get('http://localhost:4000/games')\r\n                // .then(response=>console.log(response.data.games))\r\n                .then(response => {\r\n                    setLoading(false)\r\n                    setPost(response.data.games)\r\n                    setError('')\r\n                })\r\n\r\n                .catch(error => {\r\n                    setLoading(false)\r\n                    setPost({})\r\n                    setError('Error 404 page not found')\r\n                })\r\n        } else {\r\n\r\n            const gamePosts = JSON.parse(localStorage.getItem(\"gameList\"));\r\n            setPost(gamePosts);\r\n            const sum = calculateSum(gamePosts);\r\n            setTotalLikes(sum)\r\n        }\r\n    }, [])\r\n\r\n    // Maintaining Update of GameData in Localstorage.\r\n    useEffect(() => {\r\n\r\n        if (isAnUpdate) {\r\n            localStorage.setItem(\"gameList\", JSON.stringify(post));\r\n            // Calculating Sum of All likes.\r\n            const sum = calculateSum(post);\r\n            setTotalLikes(sum);\r\n            setIsAnUpdate(false);\r\n        }\r\n    }, [isAnUpdate])\r\n\r\n    // This handler will be passed to child component to Update the like of respective game.\r\n    const LikeManager = (numberOfLikes, id) => {\r\n        \r\n    // Update your parent state with the help of incoming id.\r\n        let newArray = [...post];\r\n        const elementsIndex = post.findIndex(\r\n            element => element.id === id\r\n        );\r\n        newArray[elementsIndex].likes = numberOfLikes;\r\n        setPost(newArray);\r\n        setIsAnUpdate(true)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Typography gutterBottom variant=\"h3\" component=\"h3\" style={{ color: '#f50057' }} >\r\n                Nes Classic Video Games\r\n            </Typography>\r\n            <div>\r\n                <Box display=\"flex\" justifyContent=\"flex-start\" m={2} >\r\n                    <Button variant=\"contained\" color=\"secondary\" onClick={() => window.location.reload(false)}>\r\n                        <RefreshIcon /> Refresh\r\n                    </Button>\r\n                </Box>\r\n\r\n\r\n                <Box display=\"flex\" justifyContent=\"flex-end\" m={2} style={{ position: \"relative\", bottom: '30px' }}>\r\n                    <Button variant=\"contained\" color=\"secondary\" mr={5} style={{ marginRight: \"10px\" }} onClick={() => window.location.reload(false)}>\r\n                        <ThumbUpAltIcon /><span style={{ marginLeft: '20px' }}>{totalLikes}</span>\r\n                    </Button>\r\n\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"secondary\"\r\n                        onClick={() => {\r\n                            localStorage.clear();\r\n                            window.location.reload(false)\r\n                        }\r\n                        }><RefreshIcon />\r\n                        Reset\r\n                    </Button>\r\n                </Box>\r\n            </div>\r\n\r\n            <div className=\"dashBoardSection\" style={{ display: \"flex\", flexWrap: 'wrap', width: \"100%\", marginLeft: '30px' }}>\r\n                {loading ? <CircularProgress /> :\r\n                    post.map(list => (\r\n\r\n                        <Card className={classes.root}>\r\n                            <CardActionArea>\r\n                                <CardMedia\r\n                                    component=\"img\"\r\n                                    alt=\"Contemplative Reptile\"\r\n                                    height=\"200\"\r\n                                    image={list.image}\r\n\r\n                                    title=\"game\"\r\n                                />\r\n                            <CardContent>\r\n                                    <Typography gutterBottom variant=\"h5\" component=\"h2\">\r\n                                        <div style={{ whiteSpace: \"nowrap\", textOverflow: \"ellipsis\" }}>\r\n                                            {list.name}\r\n                                        </div>\r\n                                    </Typography>\r\n                                    <Counter likeManager={LikeManager} gameData={list} />\r\n                                </CardContent>\r\n                            </CardActionArea>\r\n                        </Card>\r\n                    ))}\r\n                {error ? error : null}\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n\r\n\r\n","\nimport './App.css';\nimport DashBoard from './frontend/Dashboard';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <DashBoard/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}